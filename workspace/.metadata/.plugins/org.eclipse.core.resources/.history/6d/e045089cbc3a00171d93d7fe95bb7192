import java.util.List;

//Changes the thirteens game so that three cards are chosen to add up to 13. Kings can be 1 of these cards.

public class CrazyThirteensBoard extends ThirteensBoard
{
  
  /**
   * contructor for class, just initializes super constructor
   */
public CrazyThirteensBoard()
{
  
}

/**
 * overrides super isLegal method. using the new rules the method checks if selected cards is a legal Move
 * Pre: Cards to be checked if legal move
 * Post: returns true if the selected cards is a legal move with the new move, false otherwise
 */
public boolean isLegal(List<Integer> selectedCards)
{
  //If three cards are selected, then the sum has to equal 13 to be a legal move. This can be checked using super isLegal method
  if (selectedCards.size() == 3)
  {
    boolean legal = containsTripleSum13(selectedCards);
    if(legal)
    {
    	return legal;
    }
  }
  
  //using the new rules the selected card if checked for being a king and if it is removed in the right order
  if(selectedCards.size()==1)
  {
    boolean legal = containsK(selectedCards);
    return legal;
  }
  
}

/**
 * overrides super anotherPlayIsPossible method. Using new rules checks the board for any possible moves
 * Pre: Cards to be checked for a possible move
 * Post: returns true if there is a possible move following the new rules, and false otherwise
 */
public boolean anotherPlayIsPossible()
{
	List<Integer> test=cardIndexes();
	//uses super to check if cards adding up to 13 is a possible move and uses method in this class to check if a king removed in the right order is possible 
	return super.containsTripleSum13(test) || containsK(test);
  
}

/**
 * Used instead of containsPairSum13 to determine if the three selected cards add up to 13. A king can be one of the cards.
 * @param selectedCards
 * @return
 */
public boolean containsTripleSum13(List<Integer> selectedCards)
{
	
	for(int x = 0;x < selectedCards.size() - 2;x++)
	{
		for(int i = x+1;i < selectedCards.size() - 1;i++)
		{
			for(int n = i+1;n < selectedCards.size();n++)
			{
				//checks if 2 cards added together equals 13
				if(cardAt(selectedCards.get(x)).pointValue() + selectedCards.get(i)).pointValue() + cardAt(selectedCards.get(n)).pointValue() == 13)
				{
					return true;
				}
			}
		}
	}
    return false;
    
}

}
