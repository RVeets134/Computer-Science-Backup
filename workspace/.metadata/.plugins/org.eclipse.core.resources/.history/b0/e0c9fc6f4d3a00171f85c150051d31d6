import java.util.List;

//Changes the thirteens game so that three cards are chosen to add up to 13. Kings can be 1 of these cards.

public class CrazyThirteensBoard extends ThirteensBoard
{
  
  /**
   * contructor for class, just initializes super constructor
   */
public CrazyThirteensBoard()
{
  
}

/**
 * overrides super isLegal method. using the new rules the method checks if selected cards is a legal Move
 * Pre: Cards to be checked if legal move
 * Post: returns true if the selected cards is a legal move with the new move, false otherwise
 */
public boolean isLegal(List<Integer> selectedCards)
{
  //If three cards are selected, then the sum has to equal 13 to be a legal move. This can be checked using super isLegal method
  if (selectedCards.size()==3)
  {
    boolean legal = super.isLegal(selectedCards);
    if(legal==true)
    {
    return true;
    }
  }
  
  //using the new rules the selected card if checked for being a king and if it is removed in the right order
  if(selectedCards.size()==1)
  {
    boolean legal=containsRightK(selectedCards);
    
    if(legal==true)
    {
    return true;
    }
  }
  return false;
}

/**
 * overrides super anotherPlayIsPossible method. Using new rules checks the board for any possible moves
 * Pre: Cards to be checked for a possible move
 * Post: returns true if there is a possible move following the new rules, and false otherwise
 */
public boolean anotherPlayIsPossible()
{
  List<Integer> test=cardIndexes();
  //uses super to check if cards adding up to 13 is a possible move and uses method in this class to check if a king removed in the right order is possible 
  return super.containsPairSum13(test) || containsRightK(test);
  
}
}
